<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.brp.mapper.DepartmentMapper" >
  <resultMap id="BaseResultMap" type="com.brp.entity.DepartmentEntity" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    
    <result column="company_id" property="companyId" jdbcType="INTEGER" />
    <result column="company_name" property="companyName" jdbcType="VARCHAR" />
    <result column="department_name" property="departmentName" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="parent_department_id" property="parentDepartmentId" jdbcType="INTEGER" />
    
    <result column="is_has_sub" property="isHasSub" jdbcType="INTEGER" />
  </resultMap> 
     
  <sql id="Base_Column_List" >
	   id,create_user,update_user,create_time,update_time,
   		company_id,company_name,department_name,status,parent_department_id,
   		is_has_sub
  </sql>
   <sql id="base_column" >
	   id,company_id,company_name,department_name,parent_department_id
  </sql>
  <insert id="insertDepartment" parameterType="com.brp.entity.DepartmentEntity"  useGeneratedKeys="true" keyProperty="id">
    insert Department
   		(create_user,update_user,create_time, update_time,
   		company_id,company_name,department_name,status,
   		parent_department_id,is_has_sub) 
    values
    	( #{createUser,jdbcType=VARCHAR},#{updateUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},
    	#{companyId,jdbcType=INTEGER},#{companyName,jdbcType=VARCHAR},#{departmentName,jdbcType=VARCHAR},#{status,jdbcType=VARCHAR},
    	#{parentDepartmentId,jdbcType=INTEGER},#{isHasSub,jdbcType=INTEGER})
  </insert>
  <select id="getDepartmentPage" resultMap="BaseResultMap" parameterType="com.brp.util.query.DepartmentQuery" >
         select 
         <include refid="Base_Column_List" />
         from department
         where 1=1
         <trim prefix=" " suffix="" suffixOverrides="" >
		    <if test="companyName != null and companyName != ''" >
		       and company_name =  #{companyName}
		      </if>
		      <if test="departmentName != '' and departmentName != null" >
		       and department_name = #{departmentName}
		      </if>
		     
		 </trim>
		 and status = 0
         order by create_time desc
    </select>
    
    <select id="getListByCompanyId" resultMap="BaseResultMap" parameterType="java.lang.String" >
         select 
         <include refid="base_column" />
         from department
         where company_id=#{companyId} and status=0 and parent_department_id=#{companyId}
    </select>
	<update id="updateDepartment" parameterType="com.brp.entity.DepartmentEntity">
		update department set 
		<if test="createUser != null">
			create_user=#{createUser,jdbcType=VARCHAR},
		</if>
		<if test="updateUser != null">
			update_user=#{updateUser,jdbcType=VARCHAR}, 
		</if>
		<if test="createTime != null">
			create_time=#{createTime,jdbcType=TIMESTAMP},
		</if>
		<if test="updateTime != null">
		update_time=#{updateTime,jdbcType=TIMESTAMP},
		</if>
		<if test="departmentName != null">
		department_name=#{departmentName,jdbcType=VARCHAR},
		</if>
		<if test="isHasSub != null">
		is_has_sub=#{isHasSub,jdbcType=INTEGER},
		</if>
		id=#{id}
		 where id=#{id} limit 1;
		 
		 
	</update>
    <select id="getDepartmentById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
         select 
         <include refid="Base_Column_List" />
         from department
         where id = #{id} and status =0
    </select>
    
    <select id="getDepartmentByNameAndcompanyId" resultMap="BaseResultMap" >
         select 
         <include refid="Base_Column_List" />
         from department
         where company_id = #{companyId} and department_name = #{departmentName} and status = 0
    </select>
    <select id="getDepartmentByNameAndPId" resultMap="BaseResultMap" >
         select 
         <include refid="Base_Column_List" />
         from department
         where department_name = #{departmentName} and parent_department_id = #{pId} and status = 0
    </select>
    
    
    <select id="getDepartmentTreeByPIdAndCId" resultMap="BaseResultMap">
         select 
         <include refid="Base_Column_List" />
         from department
         where parent_department_id = #{pid} and status=0 and company_id=#{cid} and parent_department_id is not null
    </select>
     <select id="getDepartmentIdListByPIdAndCId" resultType="java.lang.String">
         select 
         id
         from department
         where parent_department_id = #{pid} and status=0 and company_id=#{cid} and parent_department_id is not null
    </select>
    
    <select id="getDepartmentListByPId" resultMap="BaseResultMap" parameterType="java.lang.String">
         select 
         <include refid="Base_Column_List" />
         from department
         where parent_department_id = #{pid} and status=0
    </select>
    <select id="getNoSubDeptListByCId" resultMap="BaseResultMap" parameterType="java.lang.String">
         select 
         <include refid="Base_Column_List" />
         from department
         where company_id = #{cid} and is_has_sub=0 and status = 0
    </select>
    <update id="deleteDepartmentById" parameterType="java.lang.String">
		update department set 
		status =1
		 where id=#{id} limit 1;
		 
		 
	</update>
    
</mapper>